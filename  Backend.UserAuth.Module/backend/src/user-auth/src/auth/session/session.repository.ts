import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { SessionEntity } from './session.entity';

@Injectable()
export class SessionRepository {
  constructor(
    @InjectRepository(SessionEntity)
    private readonly typeormRepository: Repository<SessionEntity>,
  ) {}

  async findSession(id: string): Promise<SessionEntity | null> {
    return this.typeormRepository.findOneBy({ id });
  }

  async createSession(data: any, ttl: number): Promise<SessionEntity> {
    // ttl is expected in seconds from UserAuthConfigService, convert to ms for expiredAt
    const newSession = this.typeormRepository.create({
      // id will be generated by express-session or manually if not using it
      data: JSON.stringify(data),
      expiredAt: Date.now() + ttl * 1000,
    });
    // If `id` is not auto-generated (e.g., by express-session before calling store's set),
    // it needs to be set here. For a custom SessionService, it's generated before calling create.
    // For express-session TypeORM store, `id` is provided by express-session.
    return this.typeormRepository.save(newSession);
  }
  
  // This is for express-session like store `set` method
  async setSession(id: string, data: any, ttl: number): Promise<void> {
    const expiredAt = Date.now() + ttl * 1000;
    const sessionData = JSON.stringify(data);
    await this.typeormRepository.upsert({ id, data: sessionData, expiredAt }, ['id']);
  }


  async updateSession(id: string, data: any, ttl: number): Promise<void> {
    const session = await this.findSession(id);
    if (session) {
      session.data = JSON.stringify(data);
      session.expiredAt = Date.now() + ttl * 1000;
      await this.typeormRepository.save(session);
    }
  }

  async deleteSession(id: string): Promise<void> {
    await this.typeormRepository.delete({ id });
  }

  async clearExpiredSessions(): Promise<void> {
    await this.typeormRepository.delete({ expiredAt: Date.now() }); // Simplified, use TypeORM's LessThan
  }

  // Methods for TypeORM session store (connect-typeorm)
  async get(id: string): Promise<SessionEntity | null> {
    return this.typeormRepository.findOneBy({ id });
  }

  async set(id: string, session: any): Promise<SessionEntity> {
    // 'session' here is the express-session object which includes 'cookie'
    // We need to extract maxAge from cookie to calculate expiredAt
    const ttl = session.cookie && session.cookie.maxAge ? session.cookie.maxAge : (this.userAuthConfigService.getSessionMaxAge() * 1000 || 24 * 60 * 60 * 1000);
    const expiredAt = Date.now() + ttl;
    
    // Remove cookie from data to be stored if it's part of the session object
    const dataToStore = { ...session };
    delete dataToStore.cookie;

    const entity = this.typeormRepository.create({
        id,
        expiredAt,
        data: JSON.stringify(dataToStore)
    });
    await this.typeormRepository.upsert(entity, ['id']);
    return entity;
  }

  async destroy(id: string): Promise<void> {
    await this.typeormRepository.delete(id);
  }

  async touch(id: string, session: any): Promise<void> {
    // Update expiredAt based on session.cookie.maxAge
    const ttl = session.cookie && session.cookie.maxAge ? session.cookie.maxAge : (this.userAuthConfigService.getSessionMaxAge() * 1000 || 24 * 60 * 60 * 1000);
    const newExpiredAt = Date.now() + ttl;
    await this.typeormRepository.update({ id }, { expiredAt: newExpiredAt });
  }
}